ssh azureuser@ip_control_plane

# create a config file
cat <<EOF | sudo tee /etc/kubernetes/kubeadmn-custom.yaml
apiVersion: kubeadm.k8s.io/v1beta3
kind: InitConfiguration
nodeRegistration:
  kubeletExtraArgs:
    cloud-provider: external
---
apiVersion: kubeadm.k8s.io/v1beta3
kind: ClusterConfiguration
apiServer:
  certSANs:
    - "${ADDITIONAL_SAN}"
controllerManager:
  extraArgs:
    cloud-provider: external
networking:
  podSubnet: "192.168.0.0/16"
EOF

sudo kubeadm init --config /etc/kubernetes/kubeadmn-custom.yaml

mkdir -p /home/azureuser/.kube
sudo cp -i /etc/kubernetes/admin.conf /home/azureuser/.kube/config
sudo chown -R azureuser:azureuser /home/azureuser/.kube

# create the role binding and the user
kubectl create clusterrolebinding admin-role --clusterrole=cluster-admin --user=admin
# generate a kube config file
sudo kubeadm kubeconfig user --client-name=admin | tee /home/azureuser/admin.conf
# change private IP to public IP
sed -i "s|https://[0-9.]\+:6443|https://${ADDITIONAL_SAN}:6443|" /home/azureuser/admin.conf 

exit

# dowload kube config file
scp $ADMIN_USER_NAME@${CPLANE_IP}:admin.conf .

# set KUBECONFIG to the path of admin.conf
export KUBECONFIG=$(readlink -f admin.conf)

ssh azureuser@ip_worker_node

cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter

# sysctl params required by setup, params persist across reboots
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

# Apply sysctl params without reboot
sudo sysctl --system

# install containerd
sudo apt-get update
sudo apt-get install -y apt-transport-https ca-certificates curl gpg containerd

# configure containerd
sudo mkdir -p /etc/containerd
containerd config default | sudo tee /etc/containerd/config.toml

# enable Cgroup
sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml
sudo systemctl restart containerd

# If the directory `/etc/apt/keyrings` does not exist, it should be created before the curl command, read the note below.
sudo mkdir -p -m 755 /etc/apt/keyrings
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

# This overwrites any existing configuration in /etc/apt/sources.list.d/kubernetes.list
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
# install kubelet kubeadm kubectl
sudo apt-get update
sudo apt-get install -y kubelet kubeadm
sudo apt-mark hold kubelet kubeadm

apiServerEndpoint=10.0.0.4:6443
token=budw5d.9gzazz3mmmrvxklr
caCertHashes=sha256:cfe90f1d781c7fd691fc74cde85247c6bccbd59d2dad249d162aca189580359f


# create a config file
cat <<EOF | sudo tee /etc/kubernetes/kubeadmn-custom.yaml
apiVersion: kubeadm.k8s.io/v1beta3
kind: JoinConfiguration
nodeRegistration:
  kubeletExtraArgs:
    cloud-provider: external
discovery:
  bootstrapToken:
    apiServerEndpoint: "${apiServerEndpoint}"
    token: ${token}
    caCertHashes:
      - ${caCertHashes}
EOF

sudo kubeadm join --config /etc/kubernetes/kubeadmn-custom.yaml 


exit

ssh azureuser@ip_control_plane
helm install --repo https://raw.githubusercontent.com/kubernetes-sigs/cloud-provider-azure/master/helm/repo cloud-provider-azure --generate-name --set cloudControllerManager.clusterCIDR="192.168.0.0/16"
helm repo add projectcalico https://docs.tigera.io/calico/charts && \
helm install calico projectcalico/tigera-operator --version v3.27.3 -f https://raw.githubusercontent.com/kubernetes-sigs/cluster-api-provider-azure/main/templates/addons/calico/values.yaml --namespace tigera-operator --create-namespace

